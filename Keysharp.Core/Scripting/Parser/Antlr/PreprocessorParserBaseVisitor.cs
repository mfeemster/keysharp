//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/minip/source/repos/Keysharp_clone/Keysharp.Core/Scripting/Parser/Antlr/PreprocessorParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IPreprocessorParserVisitor{Result}"/>,
/// which can be extended to create a visitor which only needs to handle a subset
/// of the available methods.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class PreprocessorParserBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, IPreprocessorParserVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorDeclaration</c>
	/// labeled alternative in <see cref="PreprocessorParser.preprocessor_directive"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPreprocessorDeclaration([NotNull] PreprocessorParser.PreprocessorDeclarationContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorConditional</c>
	/// labeled alternative in <see cref="PreprocessorParser.preprocessor_directive"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPreprocessorConditional([NotNull] PreprocessorParser.PreprocessorConditionalContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorLine</c>
	/// labeled alternative in <see cref="PreprocessorParser.preprocessor_directive"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPreprocessorLine([NotNull] PreprocessorParser.PreprocessorLineContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorDiagnostic</c>
	/// labeled alternative in <see cref="PreprocessorParser.preprocessor_directive"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPreprocessorDiagnostic([NotNull] PreprocessorParser.PreprocessorDiagnosticContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorRegion</c>
	/// labeled alternative in <see cref="PreprocessorParser.preprocessor_directive"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPreprocessorRegion([NotNull] PreprocessorParser.PreprocessorRegionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorPragma</c>
	/// labeled alternative in <see cref="PreprocessorParser.preprocessor_directive"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPreprocessorPragma([NotNull] PreprocessorParser.PreprocessorPragmaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorNullable</c>
	/// labeled alternative in <see cref="PreprocessorParser.preprocessor_directive"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPreprocessorNullable([NotNull] PreprocessorParser.PreprocessorNullableContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorTextualDirective</c>
	/// labeled alternative in <see cref="PreprocessorParser.preprocessor_directive"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPreprocessorTextualDirective([NotNull] PreprocessorParser.PreprocessorTextualDirectiveContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorPersistent</c>
	/// labeled alternative in <see cref="PreprocessorParser.preprocessor_directive"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPreprocessorPersistent([NotNull] PreprocessorParser.PreprocessorPersistentContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorOptionalTextualDirective</c>
	/// labeled alternative in <see cref="PreprocessorParser.preprocessor_directive"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPreprocessorOptionalTextualDirective([NotNull] PreprocessorParser.PreprocessorOptionalTextualDirectiveContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorNoDynamicVars</c>
	/// labeled alternative in <see cref="PreprocessorParser.preprocessor_directive"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPreprocessorNoDynamicVars([NotNull] PreprocessorParser.PreprocessorNoDynamicVarsContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorErrorStdOut</c>
	/// labeled alternative in <see cref="PreprocessorParser.preprocessor_directive"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPreprocessorErrorStdOut([NotNull] PreprocessorParser.PreprocessorErrorStdOutContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorWinActivateForce</c>
	/// labeled alternative in <see cref="PreprocessorParser.preprocessor_directive"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPreprocessorWinActivateForce([NotNull] PreprocessorParser.PreprocessorWinActivateForceContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorNoTrayIcon</c>
	/// labeled alternative in <see cref="PreprocessorParser.preprocessor_directive"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPreprocessorNoTrayIcon([NotNull] PreprocessorParser.PreprocessorNoTrayIconContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>preprocessorNumericDirective</c>
	/// labeled alternative in <see cref="PreprocessorParser.preprocessor_directive"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPreprocessorNumericDirective([NotNull] PreprocessorParser.PreprocessorNumericDirectiveContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="PreprocessorParser.directive_new_line_or_sharp"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDirective_new_line_or_sharp([NotNull] PreprocessorParser.Directive_new_line_or_sharpContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="PreprocessorParser.preprocessor_expression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPreprocessor_expression([NotNull] PreprocessorParser.Preprocessor_expressionContext context) { return VisitChildren(context); }
}
